#!/usr/bin/env node

const PROCESS = require("process");
const { Client } = require("pg");
const readline = require("readline-sync");

function logAndExit(err) {
  console.log(err);
  process.exit(1);
}

class ExpenseData {
  constructor() {
    this.client = new Client({ database: "expenses" });
  }

  async listExpenses() {
    await this.client.connect().catch((err) => logAndExit(err));

    let res = await this.client
      .query("SELECT * FROM expenses ORDER BY created_on ASC")
      .catch((err) => logAndExit(err));

    this.displayExpenses(res.rows);

    await this.client.end().catch((err) => logAndExit(err));
  }

  async addExpense(amount, memo) {
    await this.client.connect().catch((err) => logAndExit(err));
    let date = new Date();
    date = date.toLocaleDateString();
    let queryText =
      "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3)";
    let queryValues = [amount, memo, date];

    await this.client
      .query(queryText, queryValues)
      .catch((err) => logAndExit(err));

    await this.client.end().catch((err) => logAndExit(err));
  }

  async searchExpenses(query) {
    await this.client.connect().catch((err) => logAndExit(err));

    let queryText = "SELECT * FROM expenses WHERE memo ILIKE $1";
    let res = await this.client
      .query(queryText, [`%${query}%`])
      .catch((err) => logAndExit(err));
    this.displayExpenses(res.rows);

    this.displayCount(res.rows)

    await this.client.end().catch((err) => logAndExit(err));
  }

  async deleteExpense(id) {
    await this.client.connect().catch((e) => logAndExit(e));

    const queryText = "SELECT * FROM expenses WHERE id = $1";
    const data = await this.client.query(queryText, [id]);
    if (data.rows.length === 0) {
      console.log(`There is no expense with the id ${id}`);
      await this.client.end();
    } else {
      console.log("The following expense has been deleted:");
      this.displayExpenses(data.rows);

      const deleteQuery = "DELETE FROM expenses WHERE id = $1";
      await this.client.query(deleteQuery, [id]);
      await this.client.end();
    }
  }

  async clearExpenses() {
    await this.client.connect().catch((err) => logAndExit(err));

    await this.client.query("DELETE FROM expenses");
    console.log("All expenses have been deleted");

    await this.client.end().catch((err) => logAndExit(err));
  }

  displayCount(expenses) {
    let total = 0;
    expenses.forEach(item => total++)
    console.log(`There is ${total} expenses`)
  }
  
  displayTotal(expenses) {
    let total = 0;
    expenses.forEach(item => {
      total += parseFloat(item.amount)
    })
    console.log(`Total: ${total}`.padStart(30))
  }

  displayExpenses(expenses) {
    if(expenses.length === 0) {
      console.log('there are no expenses')
      return;
    }
    expenses.forEach((tuple) => {
      let columns = [
        `${tuple.id}`.padStart(3),
        tuple.created_on.toDateString().padStart(10),
        tuple.amount.padStart(12),
        tuple.memo,
      ];

      console.log(columns.join(" | "));
    });
    this.displayTotal(expenses)

  }
}

class CLI {
  constructor() {
    this.application = new ExpenseData();
  }

  static HELP() {
    return `An expense recording system

Commands:

add AMOUNT MEMO [DATE] - record a new expense
clear - delete all expenses
list - list all expenses
delete NUMBER - remove expense with id NUMBER
search QUERY - list expenses with a matching memo field`;
  }

  displayHelp() {
    console.log(CLI.HELP());
  }

  run(args) {
    let command = args[2];

    if (command === "list") {
      this.application.listExpenses();
    } else if (command === "add") {
      let amount = args[3];
      let memo = args[4];
      if (amount && memo) {
        this.application.addExpense(amount, memo);
      } else {
        console.log("You must provide an amount and memo.");
      }
    } else if (command === "search") {
      this.application.searchExpenses(args[3]);
    } else if (command === "delete") {
      if (!args[3]) {
        console.log("Please enter an id");
      } else {
        this.application.deleteExpense(args[3]);
      }
    } else if (command === "clear") {
      const arr = [];
      while (!arr.includes("y") || !arr.includes("n")) {
        const answer = readline
          .question(
            "This will remove all expenses. Are you sure? (enter y to confirm) # enter y"
          )
          .toLowerCase();
        if (answer === "y" || answer === "n") {
          arr.push(answer);
          break;
        } else {
          console.log("You must enter a valid input");
        }
      }
      if (arr[0] === "y") this.application.clearExpenses()
    } else {
      this.displayHelp();
    }
  }
}

let cli = new CLI();
cli.run(PROCESS.argv);
